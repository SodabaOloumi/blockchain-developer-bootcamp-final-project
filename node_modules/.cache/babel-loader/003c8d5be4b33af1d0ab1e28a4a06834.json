{"remainingRequest":"/home/sodaba/blockchain-developer-bootcamp-final-project/vapp/node_modules/babel-loader/lib/index.js!/home/sodaba/blockchain-developer-bootcamp-final-project/vapp/node_modules/eslint-loader/index.js??ref--14-0!/home/sodaba/blockchain-developer-bootcamp-final-project/vapp/src/index.js","dependencies":[{"path":"/home/sodaba/blockchain-developer-bootcamp-final-project/vapp/src/index.js","mtime":1638216463817},{"path":"/home/sodaba/blockchain-developer-bootcamp-final-project/vapp/babel.config.js","mtime":1638216228752},{"path":"/home/sodaba/blockchain-developer-bootcamp-final-project/vapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sodaba/blockchain-developer-bootcamp-final-project/vapp/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/sodaba/blockchain-developer-bootcamp-final-project/vapp/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/sodaba/blockchain-developer-bootcamp-final-project/vapp/src/index.js"],"names":["Web3","healtContract","App","web3","account","meta","start","eth","net","getId","networkId","deployedNetwork","networks","Contract","abi","address","getAccounts","accounts","console","error","setStatus","message","status","document","getElementById","innerHTML","addPatient","_address","_fullName","methods","send","from","addDoctor","addRecord","_patientAddress","_doctorAddress","_cc","_pi","_comment","_mh","_recordName","_recordId","getRecord","call","record","grantPermission","_viewner","revorkPermission","recordOf","ownerOfRecord","recordId","owner","window","addEventListener","ethereum","enable","warn","providers","HttpProvider"],"mappings":"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","sourcesContent":["import Web3 from \"web3\";\nimport healtContract from \"../../backEnd/build/contracts/Healt.json\";\nconst App = {\n  web3: null,\n  account: null,\n  meta: null,\n\n  start: async function() {\n    const { web3 } = this;\n\n    try {\n      // get contract instance\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = healtContract.networks[networkId];\n      this.meta = new web3.eth.Contract(\n        healtContract.abi,\n        deployedNetwork.address\n      );\n\n      // get accounts\n      const accounts = await web3.eth.getAccounts();\n      this.account = accounts[0];\n    } catch (error) {\n      console.error(\"Could not connect to contract or chain.\");\n    }\n  },\n\n  setStatus: function(message) {\n    const status = document.getElementById(\"status\");\n    status.innerHTML = message;\n  },\n  addPatient: async function(_address, _fullName) {\n    const { addPatient } = this.meta.methods;\n    await addPatient(_address,  _fullName).send({\n      from: this.account\n    });\n  },\n  addDoctor: async function(_address, _fullName) {\n    const { addDoctor } = this.meta.methods;\n    await addDoctor(_address,  _fullName).send({\n      from: this.account\n    });\n  },\n  addRecord: async function( _fullName, _patientAddress , _doctorAddress ,\n    _cc , _pi , _comment , _mh, _recordName , _recordId) {\n    const { addRecord } = this.meta.methods;\n    await addRecord( _fullName, _patientAddress , _doctorAddress ,\n      _cc , _pi , _comment , _mh, _recordName , _recordId).send({\n      from: this.account\n    });\n  },\n  getRecord: async function getRecord( _address, _recordName) {\n    const { getRecord } = this.meta.methods;\n   let record= await getRecord( _address, _recordName).call();\n   return record;\n  },\n  grantPermission: async function grantPermission( _patientAddress, _viewner, _recordName  ) {\n    const { grantPermission } = this.meta.methods;\n    await grantPermission(_patientAddress, _viewner, _recordName ).send({\n      from: this.account\n    });\n  },\n  revorkPermission: async function revorkPermission( _patientAddress, _viewner, _recordName  ) {\n    const { revorkPermission } = this.meta.methods;\n    await revorkPermission(_patientAddress, _viewner, _recordName ).send({\n      from: this.account\n    });\n  },\n  recordOf: async function recordOf(address) {\n    const { recordOf } = this.meta.methods;\n   let record = await recordOf(address).call();\n   return record;\n  },\n  ownerOfRecord: async function ownerOfRecord(recordId) {\n    const { ownerOfRecord } = this.meta.methods;\n   let owner = await ownerOfRecord(recordId).call();\n   return owner;\n  },\n  \n \n};\n\nwindow.App = App;\n\nwindow.addEventListener(\"load\", async function() {\n  if (window.ethereum) {\n    // use MetaMask's provider\n    App.web3 = new Web3(window.ethereum);\n    await window.ethereum.enable(); // get permission to access accounts\n  } else {\n    console.warn(\n      \"No web3 detected. Falling back to http://172.0.0.1:7545. You should remove this fallback when you deploy live\"\n    );\n    // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)\n    App.web3 = new Web3(\n      new Web3.providers.HttpProvider(\"http://172.0.0.1\")\n    );\n  }\n\n  App.start();\n});\nexport default { App };\n"]}]}